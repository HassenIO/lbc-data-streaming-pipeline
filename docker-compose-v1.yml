# Start the env: docker compose up
# Stop the env: docker compose down
# Clean all containers: docker compose rm -svf

version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: test_topic:1:1
    depends_on:
      - zookeeper
    # command: ["/bin/bash", "-c", "/create-topics.sh"] # Run the initialization script
    # volumes:
    #   - ./bin/create-kafka-topics.sh:/create-topics.sh # Mount the script into the Kafka container

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./data:/data/db

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    volumes:
      - ./notebooks:/home/jovyan/notebooks
    ports:
      - "8888:8888" # Jupyter lab UI
      - "4040:4040" # Spark UI
    depends_on:
      - kafka
      - mongodb
    environment:
      - KAFKA_BROKER=kafka:9092
      - MONGO_URI=mongodb://mongo:27017

  postgres:
    image: debezium/postgres:15-alpine
    hostname: postgres
    container_name: postgres
    ports:
     - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

  connect:
    image: debezium/connect:2.4.0.Final
    hostname: connect
    container_name: connect
    depends_on:
      - kafka
      - postgres
    ports:
      - 8083:8083
    volumes:
      - ./debezium-connector-postgres:/kafka/connect/debezium-connector-postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      REST_ADVERTISED_HOST_NAME: connect
      REST_PORT: 8083
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      STATUS_STORAGE_TOPIC: docker-connect-status
      KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All

networks:
  default:
    name: lbc-network
    external: false
